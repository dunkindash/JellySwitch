name: Build and Release Plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    env:
      PROJECT: src/UserSwitcher.csproj
      ASSEMBLY_NAME: TechBrew.UserSwitcher
      GUID: e0a4a1a2-5b6b-4e9d-88b1-1c71f0b9b0ab
      TARGET_ABI: 10.10.7.0
      FRAMEWORK: net8.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Compute Version
        id: ver
        run: |
          # Determine version from tag. If current ref isn't a tag, fall back to latest tag.
          REF_NAME="${GITHUB_REF_NAME:-}"
          # Normalize
          REF_NAME="${REF_NAME##*/}"
          if echo "$REF_NAME" | grep -Eq '^v[0-9]+(\.[0-9]+)*$'; then
            VERSION="${REF_NAME#v}"
          else
            git fetch --tags --force
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
            if [ -z "$LAST_TAG" ]; then
              echo "No tag found to compute version" >&2
              exit 1
            fi
            VERSION="${LAST_TAG#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore "$PROJECT"

      - name: Publish
        run: dotnet publish "$PROJECT" -c Release -o artifacts/publish

      - name: Prepare plugin contents
        run: |
          mkdir -p dist/${{ env.ASSEMBLY_NAME }}
          TAG="v${{ steps.ver.outputs.version }}"
          SOURCE_URL="https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG}/${{ env.ASSEMBLY_NAME }}-${{ steps.ver.outputs.version }}.zip"
          jq \
            --arg v "${{ steps.ver.outputs.version }}" \
            --arg src "$SOURCE_URL" \
            --arg abi "${{ env.TARGET_ABI }}" \
            '.version=$v | .sourceUrl=$src | .targetAbi=$abi' manifest.json > artifacts/publish/manifest.json
          # Copy published files into a folder named after the assembly (common layout for Jellyfin plugins)
          cp -r artifacts/publish/* dist/${{ env.ASSEMBLY_NAME }}/

      - name: Create zip
        run: |
          mkdir -p dist
          (cd dist && zip -r "${{ env.ASSEMBLY_NAME }}-${{ steps.ver.outputs.version }}.zip" "${{ env.ASSEMBLY_NAME }}")

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          files: dist/${{ env.ASSEMBLY_NAME }}-${{ steps.ver.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute checksum (downloaded asset)
        id: sum_remote
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          TAG="v$VERSION"
          URL="https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG}/${{ env.ASSEMBLY_NAME }}-$VERSION.zip"
          echo "Downloading $URL"
          curl -L --fail --retry 6 --retry-delay 5 -o asset.zip "$URL"
          SHA=$(shasum -a 256 asset.zip | cut -d ' ' -f1)
          echo "sha256=$SHA" >> $GITHUB_OUTPUT

      - name: Generate docs/manifest.json (plugin repository)
        env:
          VERSION: ${{ steps.ver.outputs.version }}
          SHA256: ${{ steps.sum_remote.outputs.sha256 }}
        run: |
          mkdir -p docs
          TAG="v$VERSION"
          TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          jq -n \
            --arg repo "$GITHUB_REPOSITORY" \
            --arg guid "${{ env.GUID }}" \
            --arg assembly "${{ env.ASSEMBLY_NAME }}" \
            --arg ref "$TAG" \
            --arg version "$VERSION" \
            --arg abi "${{ env.TARGET_ABI }}" \
            --arg framework "${{ env.FRAMEWORK }}" \
            --arg sha "$SHA256" \
            --arg ts "$TS" \
            '[
              {
                guid: $guid,
                name: "User Switcher",
                description: "Switch-as-user (ephemeral session) and Quick Connect code authorization from an admin UI.",
                owner: "TechBrew",
                category: "General",
                imageUrl: "",
                versions: [
                  {
                    version: $version,
                    changelog: ("Release " + $version),
                    targetAbi: $abi,
                    sourceUrl: ("https://github.com/" + $repo + "/releases/download/" + $ref + "/" + $assembly + "-" + $version + ".zip"),
                    checksum: ("sha256:" + $sha),
                    timestamp: $ts
                  }
                ]
              }
            ]' > docs/manifest.json

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

